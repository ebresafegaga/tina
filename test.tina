
34


claim A Nat
def A = (341)

fn (x, y) x

fn ()  34

fn (var) "something" 

(fn (x, y)  "nope") (34, 5)

(34)

("wewe")

claim B String 
def B = "something"

if true then "de" else "ther"

claim F (Nat, Nat -> Nat)
def F (a, b) = 
    b

def car () = 
    let a = F (1, fn (v) v); 
    a ()

def T (a, y) = 
    let b = 23; 

(fn () 34)


data Name = 
    { claim A Nat, 
      claim B (String, Nat -> Nat) }

(the Nat 24)

def B = 
    let a = 10; 
    23; 
    54;
    "stringer"

a.A 

b.c.D

Person { name: "ogaga", age: 10 }


claim plus (Nat, Nat -> Nat) 
def plus (x, y) = x + y 

def create_pos (x, y) =  Loc { start: x, end_: y }

Other { a: Person {v: 10, b: 3.4}, 
        c: fn (x, y) x }

    case ( case 23 { x ->  x} ) {
        Name { a: b} -> 23, 
        x ->  x
    }

def a = 34

a

case Person { name: "ogaga", age: Number { value: 20 } } {
    Person { name: x, age: Number { value: v} } -> v
}

(((fn (x) fn (y) x) (23)) (67))




(((fn (x) fn (y) x) (23)) (67))

45 

67

"34"

def name = 35

name

def func (x, y) = 34

func (1, 2)

fn (x) x

def ogaga = Name { a: func, b : 29, other: (fn (c) c) }

case (ogaga) {
    Name { a: f, b: idc, other: g } -> f (idc, "this must be returned")
}

def safe = Name { a: func, b : 29, rest: Oga { safe: 45} }

ogaga.a 

ogaga.other

true 

false 

datatype roomate = Anderson(Nat, Nat) | Ogaga | Ifeoluwa 

Ifeoluwa 

def a = Anderson ("something", 34)

def b = Ogaga 

b 


case (a) {
    Ogaga -> "ogagaaa",
    Anderson (s, other) -> s 
}


6 + 5

30 + 45 

def fib (n) =
    case (n) {
        1 -> 0, 
        2 -> 1, 
        n -> fib (n - 1) + fib (n - 2)
    }

"Fib numbers"
fib (1)
fib (2)
fib (3)
fib (4)
fib (5)
fib (10)