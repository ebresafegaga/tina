State 0:
## Known stack suffix:
##
## LR(1) items:
toplevel' -> . toplevel [ # ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On DEF shift to state 105
-- On DATA shift to state 112
-- On CLAIM shift to state 124
-- On CASE shift to state 42
-- On toplevel shift to state 127
-- On top shift to state 128
-- On record_decl shift to state 129
-- On list(top) shift to state 134
-- On expression shift to state 131
-- On def shift to state 132
-- On claim shift to state 133
## Reductions:
-- On EOF
--   reduce production list(top) ->

State 1:
## Known stack suffix:
## TRUE
## LR(1) items:
expression -> TRUE . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> TRUE

State 2:
## Known stack suffix:
## TK_TODO
## LR(1) items:
expression -> TK_TODO . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> TK_TODO

State 3:
## Known stack suffix:
## THE
## LR(1) items:
expression -> THE . ty expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TY_STRING shift to state 4
-- On TY_NAT shift to state 5
-- On TY_INT shift to state 6
-- On TY_FLOAT shift to state 7
-- On LPAREN shift to state 8
-- On ty shift to state 17
## Reductions:

State 4:
## Known stack suffix:
## TY_STRING
## LR(1) items:
ty -> TY_STRING . [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW
--   reduce production ty -> TY_STRING

State 5:
## Known stack suffix:
## TY_NAT
## LR(1) items:
ty -> TY_NAT . [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW
--   reduce production ty -> TY_NAT

State 6:
## Known stack suffix:
## TY_INT
## LR(1) items:
ty -> TY_INT . [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW
--   reduce production ty -> TY_INT

State 7:
## Known stack suffix:
## TY_FLOAT
## LR(1) items:
ty -> TY_FLOAT . [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW
--   reduce production ty -> TY_FLOAT

State 8:
## Known stack suffix:
## LPAREN
## LR(1) items:
ty -> LPAREN . loption(separated_nonempty_list(COMMA,ty)) ARROW ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
-- On TY_STRING shift to state 4
-- On TY_NAT shift to state 5
-- On TY_INT shift to state 6
-- On TY_FLOAT shift to state 7
-- On LPAREN shift to state 8
-- On ty shift to state 9
-- On separated_nonempty_list(COMMA,ty) shift to state 12
-- On loption(separated_nonempty_list(COMMA,ty)) shift to state 13
## Reductions:
-- On ARROW
--   reduce production loption(separated_nonempty_list(COMMA,ty)) ->

State 9:
## Known stack suffix:
## ty
## LR(1) items:
separated_nonempty_list(COMMA,ty) -> ty . [ ARROW ]
separated_nonempty_list(COMMA,ty) -> ty . COMMA separated_nonempty_list(COMMA,ty) [ ARROW ]
## Transitions:
-- On COMMA shift to state 10
## Reductions:
-- On ARROW
--   reduce production separated_nonempty_list(COMMA,ty) -> ty

State 10:
## Known stack suffix:
## ty COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ty) -> ty COMMA . separated_nonempty_list(COMMA,ty) [ ARROW ]
## Transitions:
-- On TY_STRING shift to state 4
-- On TY_NAT shift to state 5
-- On TY_INT shift to state 6
-- On TY_FLOAT shift to state 7
-- On LPAREN shift to state 8
-- On ty shift to state 9
-- On separated_nonempty_list(COMMA,ty) shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## ty COMMA separated_nonempty_list(COMMA,ty)
## LR(1) items:
separated_nonempty_list(COMMA,ty) -> ty COMMA separated_nonempty_list(COMMA,ty) . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production separated_nonempty_list(COMMA,ty) -> ty COMMA separated_nonempty_list(COMMA,ty)

State 12:
## Known stack suffix:
## separated_nonempty_list(COMMA,ty)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ty)) -> separated_nonempty_list(COMMA,ty) . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production loption(separated_nonempty_list(COMMA,ty)) -> separated_nonempty_list(COMMA,ty)

State 13:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,ty))
## LR(1) items:
ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) . ARROW ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
-- On ARROW shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW
## LR(1) items:
ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW . ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
-- On TY_STRING shift to state 4
-- On TY_NAT shift to state 5
-- On TY_INT shift to state 6
-- On TY_FLOAT shift to state 7
-- On LPAREN shift to state 8
-- On ty shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty
## LR(1) items:
ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty . RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
-- On RPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty RPAREN
## LR(1) items:
ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty RPAREN . [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW
--   reduce production ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty RPAREN

State 17:
## Known stack suffix:
## THE ty
## LR(1) items:
expression -> THE ty . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 104
## Reductions:

State 18:
## Known stack suffix:
## STRING
## LR(1) items:
expression -> STRING . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> STRING

State 19:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> LPAREN . expression RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On RPAREN shift to state 20
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 102
## Reductions:

State 20:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
expression -> LPAREN RPAREN . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> LPAREN RPAREN

State 21:
## Known stack suffix:
## LET
## LR(1) items:
expression -> LET . ID EQUALS expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On ID shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## LET ID
## LR(1) items:
expression -> LET ID . EQUALS expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On EQUALS shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## LET ID EQUALS
## LR(1) items:
expression -> LET ID EQUALS . expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 98
## Reductions:

State 24:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> INT

State 25:
## Known stack suffix:
## IF
## LR(1) items:
expression -> IF . expression THEN expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 93
## Reductions:

State 26:
## Known stack suffix:
## ID
## LR(1) items:
expression -> ID . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> ID . LBRACE separated_nonempty_list(COMMA,record_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On LBRACE shift to state 27
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> ID
** Conflict on LBRACE

State 27:
## Known stack suffix:
## ID LBRACE
## LR(1) items:
expression -> ID LBRACE . separated_nonempty_list(COMMA,record_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On ID shift to state 28
-- On separated_nonempty_list(COMMA,record_expr_body) shift to state 88
-- On record_expr_body shift to state 90
## Reductions:

State 28:
## Known stack suffix:
## ID
## LR(1) items:
record_expr_body -> ID . COLON expression [ RBRACE COMMA ]
## Transitions:
-- On COLON shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## ID COLON
## LR(1) items:
record_expr_body -> ID COLON . expression [ RBRACE COMMA ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 87
## Reductions:

State 30:
## Known stack suffix:
## FN
## LR(1) items:
expression -> FN . arg_list expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On LPAREN shift to state 31
-- On arg_list shift to state 39
## Reductions:

State 31:
## Known stack suffix:
## LPAREN
## LR(1) items:
arg_list -> LPAREN . loption(separated_nonempty_list(COMMA,param)) RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EQUALS CASE ]
## Transitions:
-- On ID shift to state 32
-- On separated_nonempty_list(COMMA,param) shift to state 33
-- On param shift to state 34
-- On loption(separated_nonempty_list(COMMA,param)) shift to state 37
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,param)) ->

State 32:
## Known stack suffix:
## ID
## LR(1) items:
param -> ID . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production param -> ID

State 33:
## Known stack suffix:
## separated_nonempty_list(COMMA,param)
## LR(1) items:
loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param)

State 34:
## Known stack suffix:
## param
## LR(1) items:
separated_nonempty_list(COMMA,param) -> param . [ RPAREN ]
separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 35
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,param) -> param

State 35:
## Known stack suffix:
## param COMMA
## LR(1) items:
separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RPAREN ]
## Transitions:
-- On ID shift to state 32
-- On separated_nonempty_list(COMMA,param) shift to state 36
-- On param shift to state 34
## Reductions:

State 36:
## Known stack suffix:
## param COMMA separated_nonempty_list(COMMA,param)
## LR(1) items:
separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param)

State 37:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,param))
## LR(1) items:
arg_list -> LPAREN loption(separated_nonempty_list(COMMA,param)) . RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EQUALS CASE ]
## Transitions:
-- On RPAREN shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,param)) RPAREN
## LR(1) items:
arg_list -> LPAREN loption(separated_nonempty_list(COMMA,param)) RPAREN . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EQUALS CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EQUALS CASE
--   reduce production arg_list -> LPAREN loption(separated_nonempty_list(COMMA,param)) RPAREN

State 39:
## Known stack suffix:
## FN arg_list
## LR(1) items:
expression -> FN arg_list . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 86
## Reductions:

State 40:
## Known stack suffix:
## FLOAT
## LR(1) items:
expression -> FLOAT . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> FLOAT

State 41:
## Known stack suffix:
## FALSE
## LR(1) items:
expression -> FALSE . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> FALSE

State 42:
## Known stack suffix:
## CASE
## LR(1) items:
expression -> CASE . expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## CASE expression
## LR(1) items:
expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
expression -> CASE expression . LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On LBRACE shift to state 64
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:

State 44:
## Known stack suffix:
## expression STAR
## LR(1) items:
expression -> expression STAR . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## expression STAR expression
## LR(1) items:
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression STAR expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> expression STAR expression
** Conflict on STAR SEMICOLON PLUS MINUS LPAREN DOT DIV

State 46:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
expression -> expression SEMICOLON . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## expression SEMICOLON expression
## LR(1) items:
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression SEMICOLON expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> expression SEMICOLON expression
** Conflict on STAR SEMICOLON PLUS MINUS LPAREN DOT DIV

State 48:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression PLUS expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DEF DATA COMMA CLAIM CASE
--   reduce production expression -> expression PLUS expression
** Conflict on STAR SEMICOLON LPAREN DOT

State 50:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr_list -> LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 51
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 52
-- On expression shift to state 54
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 51:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 52:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
expr_list -> LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On RPAREN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
## LR(1) items:
expr_list -> LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expr_list -> LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 54:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . expr_list [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . SEMICOLON expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . DOT ID [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . PLUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . MINUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . STAR expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . DIV expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On COMMA shift to state 62
-- On expr_list shift to state 61
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 55:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression MINUS expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DEF DATA COMMA CLAIM CASE
--   reduce production expression -> expression MINUS expression
** Conflict on STAR SEMICOLON LPAREN DOT

State 57:
## Known stack suffix:
## expression DOT
## LR(1) items:
expression -> expression DOT . ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On ID shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## expression DOT ID
## LR(1) items:
expression -> expression DOT ID . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> expression DOT ID

State 59:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression DIV expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> expression DIV expression
** Conflict on STAR SEMICOLON LPAREN DOT

State 61:
## Known stack suffix:
## expression expr_list
## LR(1) items:
expression -> expression expr_list . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> expression expr_list

State 62:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On separated_nonempty_list(COMMA,expression) shift to state 63
-- On expression shift to state 54
## Reductions:

State 63:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 64:
## Known stack suffix:
## CASE expression LBRACE
## LR(1) items:
expression -> CASE expression LBRACE . separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On LPAREN shift to state 65
-- On ID shift to state 66
-- On separated_nonempty_list(COMMA,case_expr_body) shift to state 78
-- On pattern shift to state 80
-- On case_expr_body shift to state 83
## Reductions:

State 65:
## Known stack suffix:
## LPAREN
## LR(1) items:
pattern -> LPAREN . pattern RPAREN [ RPAREN RBRACE COMMA ARROW ]
## Transitions:
-- On LPAREN shift to state 65
-- On ID shift to state 66
-- On pattern shift to state 76
## Reductions:

State 66:
## Known stack suffix:
## ID
## LR(1) items:
pattern -> ID . [ RPAREN RBRACE COMMA ARROW ]
pattern -> ID . LBRACE separated_nonempty_list(COMMA,record_pattern_expr) RBRACE [ RPAREN RBRACE COMMA ARROW ]
## Transitions:
-- On LBRACE shift to state 67
## Reductions:
-- On RPAREN RBRACE COMMA ARROW
--   reduce production pattern -> ID

State 67:
## Known stack suffix:
## ID LBRACE
## LR(1) items:
pattern -> ID LBRACE . separated_nonempty_list(COMMA,record_pattern_expr) RBRACE [ RPAREN RBRACE COMMA ARROW ]
## Transitions:
-- On ID shift to state 68
-- On separated_nonempty_list(COMMA,record_pattern_expr) shift to state 71
-- On record_pattern_expr shift to state 73
## Reductions:

State 68:
## Known stack suffix:
## ID
## LR(1) items:
record_pattern_expr -> ID . COLON pattern [ RBRACE COMMA ]
## Transitions:
-- On COLON shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## ID COLON
## LR(1) items:
record_pattern_expr -> ID COLON . pattern [ RBRACE COMMA ]
## Transitions:
-- On LPAREN shift to state 65
-- On ID shift to state 66
-- On pattern shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## ID COLON pattern
## LR(1) items:
record_pattern_expr -> ID COLON pattern . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production record_pattern_expr -> ID COLON pattern

State 71:
## Known stack suffix:
## ID LBRACE separated_nonempty_list(COMMA,record_pattern_expr)
## LR(1) items:
pattern -> ID LBRACE separated_nonempty_list(COMMA,record_pattern_expr) . RBRACE [ RPAREN RBRACE COMMA ARROW ]
## Transitions:
-- On RBRACE shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## ID LBRACE separated_nonempty_list(COMMA,record_pattern_expr) RBRACE
## LR(1) items:
pattern -> ID LBRACE separated_nonempty_list(COMMA,record_pattern_expr) RBRACE . [ RPAREN RBRACE COMMA ARROW ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE COMMA ARROW
--   reduce production pattern -> ID LBRACE separated_nonempty_list(COMMA,record_pattern_expr) RBRACE

State 73:
## Known stack suffix:
## record_pattern_expr
## LR(1) items:
separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr . [ RBRACE ]
separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr . COMMA separated_nonempty_list(COMMA,record_pattern_expr) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 74
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr

State 74:
## Known stack suffix:
## record_pattern_expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr COMMA . separated_nonempty_list(COMMA,record_pattern_expr) [ RBRACE ]
## Transitions:
-- On ID shift to state 68
-- On separated_nonempty_list(COMMA,record_pattern_expr) shift to state 75
-- On record_pattern_expr shift to state 73
## Reductions:

State 75:
## Known stack suffix:
## record_pattern_expr COMMA separated_nonempty_list(COMMA,record_pattern_expr)
## LR(1) items:
separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr COMMA separated_nonempty_list(COMMA,record_pattern_expr) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr COMMA separated_nonempty_list(COMMA,record_pattern_expr)

State 76:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern -> LPAREN pattern . RPAREN [ RPAREN RBRACE COMMA ARROW ]
## Transitions:
-- On RPAREN shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
pattern -> LPAREN pattern RPAREN . [ RPAREN RBRACE COMMA ARROW ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE COMMA ARROW
--   reduce production pattern -> LPAREN pattern RPAREN

State 78:
## Known stack suffix:
## CASE expression LBRACE separated_nonempty_list(COMMA,case_expr_body)
## LR(1) items:
expression -> CASE expression LBRACE separated_nonempty_list(COMMA,case_expr_body) . RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On RBRACE shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## CASE expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE
## LR(1) items:
expression -> CASE expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> CASE expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE

State 80:
## Known stack suffix:
## pattern
## LR(1) items:
case_expr_body -> pattern . ARROW expression [ RBRACE COMMA ]
## Transitions:
-- On ARROW shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## pattern ARROW
## LR(1) items:
case_expr_body -> pattern ARROW . expression [ RBRACE COMMA ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## pattern ARROW expression
## LR(1) items:
case_expr_body -> pattern ARROW expression . [ RBRACE COMMA ]
expression -> expression . expr_list [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . SEMICOLON expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . DOT ID [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . PLUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . MINUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . STAR expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . DIV expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On RBRACE COMMA
--   reduce production case_expr_body -> pattern ARROW expression

State 83:
## Known stack suffix:
## case_expr_body
## LR(1) items:
separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body . [ RBRACE ]
separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body . COMMA separated_nonempty_list(COMMA,case_expr_body) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 84
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body

State 84:
## Known stack suffix:
## case_expr_body COMMA
## LR(1) items:
separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body COMMA . separated_nonempty_list(COMMA,case_expr_body) [ RBRACE ]
## Transitions:
-- On LPAREN shift to state 65
-- On ID shift to state 66
-- On separated_nonempty_list(COMMA,case_expr_body) shift to state 85
-- On pattern shift to state 80
-- On case_expr_body shift to state 83
## Reductions:

State 85:
## Known stack suffix:
## case_expr_body COMMA separated_nonempty_list(COMMA,case_expr_body)
## LR(1) items:
separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body COMMA separated_nonempty_list(COMMA,case_expr_body) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body COMMA separated_nonempty_list(COMMA,case_expr_body)

State 86:
## Known stack suffix:
## FN arg_list expression
## LR(1) items:
expression -> FN arg_list expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> FN arg_list expression
** Conflict on STAR SEMICOLON PLUS MINUS LPAREN DOT DIV

State 87:
## Known stack suffix:
## ID COLON expression
## LR(1) items:
expression -> expression . expr_list [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . SEMICOLON expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . DOT ID [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . PLUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . MINUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . STAR expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
expression -> expression . DIV expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
record_expr_body -> ID COLON expression . [ RBRACE COMMA ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On RBRACE COMMA
--   reduce production record_expr_body -> ID COLON expression

State 88:
## Known stack suffix:
## ID LBRACE separated_nonempty_list(COMMA,record_expr_body)
## LR(1) items:
expression -> ID LBRACE separated_nonempty_list(COMMA,record_expr_body) . RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On RBRACE shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## ID LBRACE separated_nonempty_list(COMMA,record_expr_body) RBRACE
## LR(1) items:
expression -> ID LBRACE separated_nonempty_list(COMMA,record_expr_body) RBRACE . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> ID LBRACE separated_nonempty_list(COMMA,record_expr_body) RBRACE

State 90:
## Known stack suffix:
## record_expr_body
## LR(1) items:
separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body . [ RBRACE ]
separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body . COMMA separated_nonempty_list(COMMA,record_expr_body) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 91
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body

State 91:
## Known stack suffix:
## record_expr_body COMMA
## LR(1) items:
separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body COMMA . separated_nonempty_list(COMMA,record_expr_body) [ RBRACE ]
## Transitions:
-- On ID shift to state 28
-- On separated_nonempty_list(COMMA,record_expr_body) shift to state 92
-- On record_expr_body shift to state 90
## Reductions:

State 92:
## Known stack suffix:
## record_expr_body COMMA separated_nonempty_list(COMMA,record_expr_body)
## LR(1) items:
separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body COMMA separated_nonempty_list(COMMA,record_expr_body) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body COMMA separated_nonempty_list(COMMA,record_expr_body)

State 93:
## Known stack suffix:
## IF expression
## LR(1) items:
expression -> IF expression . THEN expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . expr_list [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . SEMICOLON expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . DOT ID [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . PLUS expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . MINUS expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . STAR expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . DIV expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## Transitions:
-- On THEN shift to state 94
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:

State 94:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
expression -> IF expression THEN . expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## IF expression THEN expression
## LR(1) items:
expression -> IF expression THEN expression . ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On ELSE shift to state 96
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:

State 96:
## Known stack suffix:
## IF expression THEN expression ELSE
## LR(1) items:
expression -> IF expression THEN expression ELSE . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## IF expression THEN expression ELSE expression
## LR(1) items:
expression -> IF expression THEN expression ELSE expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> IF expression THEN expression ELSE expression
** Conflict on STAR SEMICOLON PLUS MINUS LPAREN DOT DIV

State 98:
## Known stack suffix:
## LET ID EQUALS expression
## LR(1) items:
expression -> LET ID EQUALS expression . SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 99
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:

State 99:
## Known stack suffix:
## LET ID EQUALS expression SEMICOLON
## LR(1) items:
expression -> LET ID EQUALS expression SEMICOLON . maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression SEMICOLON . expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On maybe_empty_expr shift to state 100
-- On expression shift to state 101
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production maybe_empty_expr ->
** Conflict on TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE CASE

State 100:
## Known stack suffix:
## LET ID EQUALS expression SEMICOLON maybe_empty_expr
## LR(1) items:
expression -> LET ID EQUALS expression SEMICOLON maybe_empty_expr . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> LET ID EQUALS expression SEMICOLON maybe_empty_expr

State 101:
## Known stack suffix:
## expression SEMICOLON expression
## LR(1) items:
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression SEMICOLON expression . [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
maybe_empty_expr -> expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On STAR SEMICOLON PLUS MINUS LPAREN DOT DIV
--   reduce production expression -> expression SEMICOLON expression
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production maybe_empty_expr -> expression
** Conflict on STAR SEMICOLON PLUS MINUS LPAREN DOT DIV

State 102:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . expr_list [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
expression -> expression . SEMICOLON expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
expression -> expression . DOT ID [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
expression -> expression . PLUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
expression -> expression . MINUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
expression -> expression . STAR expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
expression -> expression . DIV expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
expression -> LPAREN expression . RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On RPAREN shift to state 103
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:

State 103:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> LPAREN expression RPAREN

State 104:
## Known stack suffix:
## THE ty expression
## LR(1) items:
expression -> THE ty expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE
--   reduce production expression -> THE ty expression
** Conflict on STAR SEMICOLON PLUS MINUS LPAREN DOT DIV

State 105:
## Known stack suffix:
## DEF
## LR(1) items:
def -> DEF . ID EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
def -> DEF . ID arg_list EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On ID shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## DEF ID
## LR(1) items:
def -> DEF ID . EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
def -> DEF ID . arg_list EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On LPAREN shift to state 31
-- On EQUALS shift to state 107
-- On arg_list shift to state 109
## Reductions:

State 107:
## Known stack suffix:
## DEF ID EQUALS
## LR(1) items:
def -> DEF ID EQUALS . expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## DEF ID EQUALS expression
## LR(1) items:
def -> DEF ID EQUALS expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production def -> DEF ID EQUALS expression
** Conflict on LPAREN

State 109:
## Known stack suffix:
## DEF ID arg_list
## LR(1) items:
def -> DEF ID arg_list . EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On EQUALS shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## DEF ID arg_list EQUALS
## LR(1) items:
def -> DEF ID arg_list EQUALS . expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On CASE shift to state 42
-- On expression shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## DEF ID arg_list EQUALS expression
## LR(1) items:
def -> DEF ID arg_list EQUALS expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production def -> DEF ID arg_list EQUALS expression
** Conflict on LPAREN

State 112:
## Known stack suffix:
## DATA
## LR(1) items:
record_decl -> DATA . ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On ID shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## DATA ID
## LR(1) items:
record_decl -> DATA ID . EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On EQUALS shift to state 114
## Reductions:

State 114:
## Known stack suffix:
## DATA ID EQUALS
## LR(1) items:
record_decl -> DATA ID EQUALS . LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On LBRACE shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## DATA ID EQUALS LBRACE
## LR(1) items:
record_decl -> DATA ID EQUALS LBRACE . separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On CLAIM shift to state 116
-- On separated_nonempty_list(COMMA,record_claim) shift to state 119
-- On record_claim shift to state 121
## Reductions:

State 116:
## Known stack suffix:
## CLAIM
## LR(1) items:
record_claim -> CLAIM . ID ty [ RBRACE COMMA ]
## Transitions:
-- On ID shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## CLAIM ID
## LR(1) items:
record_claim -> CLAIM ID . ty [ RBRACE COMMA ]
## Transitions:
-- On TY_STRING shift to state 4
-- On TY_NAT shift to state 5
-- On TY_INT shift to state 6
-- On TY_FLOAT shift to state 7
-- On LPAREN shift to state 8
-- On ty shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## CLAIM ID ty
## LR(1) items:
record_claim -> CLAIM ID ty . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production record_claim -> CLAIM ID ty

State 119:
## Known stack suffix:
## DATA ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim)
## LR(1) items:
record_decl -> DATA ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) . RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On RBRACE shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## DATA ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE
## LR(1) items:
record_decl -> DATA ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production record_decl -> DATA ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE

State 121:
## Known stack suffix:
## record_claim
## LR(1) items:
separated_nonempty_list(COMMA,record_claim) -> record_claim . [ RBRACE ]
separated_nonempty_list(COMMA,record_claim) -> record_claim . COMMA separated_nonempty_list(COMMA,record_claim) [ RBRACE ]
## Transitions:
-- On COMMA shift to state 122
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,record_claim) -> record_claim

State 122:
## Known stack suffix:
## record_claim COMMA
## LR(1) items:
separated_nonempty_list(COMMA,record_claim) -> record_claim COMMA . separated_nonempty_list(COMMA,record_claim) [ RBRACE ]
## Transitions:
-- On CLAIM shift to state 116
-- On separated_nonempty_list(COMMA,record_claim) shift to state 123
-- On record_claim shift to state 121
## Reductions:

State 123:
## Known stack suffix:
## record_claim COMMA separated_nonempty_list(COMMA,record_claim)
## LR(1) items:
separated_nonempty_list(COMMA,record_claim) -> record_claim COMMA separated_nonempty_list(COMMA,record_claim) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production separated_nonempty_list(COMMA,record_claim) -> record_claim COMMA separated_nonempty_list(COMMA,record_claim)

State 124:
## Known stack suffix:
## CLAIM
## LR(1) items:
claim -> CLAIM . ID ty [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On ID shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## CLAIM ID
## LR(1) items:
claim -> CLAIM ID . ty [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On TY_STRING shift to state 4
-- On TY_NAT shift to state 5
-- On TY_INT shift to state 6
-- On TY_FLOAT shift to state 7
-- On LPAREN shift to state 8
-- On ty shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## CLAIM ID ty
## LR(1) items:
claim -> CLAIM ID ty . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production claim -> CLAIM ID ty

State 127:
## Known stack suffix:
## toplevel
## LR(1) items:
toplevel' -> toplevel . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept toplevel

State 128:
## Known stack suffix:
## top
## LR(1) items:
list(top) -> top . list(top) [ EOF ]
## Transitions:
-- On TRUE shift to state 1
-- On TK_TODO shift to state 2
-- On THE shift to state 3
-- On STRING shift to state 18
-- On LPAREN shift to state 19
-- On LET shift to state 21
-- On INT shift to state 24
-- On IF shift to state 25
-- On ID shift to state 26
-- On FN shift to state 30
-- On FLOAT shift to state 40
-- On FALSE shift to state 41
-- On DEF shift to state 105
-- On DATA shift to state 112
-- On CLAIM shift to state 124
-- On CASE shift to state 42
-- On top shift to state 128
-- On record_decl shift to state 129
-- On list(top) shift to state 130
-- On expression shift to state 131
-- On def shift to state 132
-- On claim shift to state 133
## Reductions:
-- On EOF
--   reduce production list(top) ->

State 129:
## Known stack suffix:
## record_decl
## LR(1) items:
top -> record_decl . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production top -> record_decl

State 130:
## Known stack suffix:
## top list(top)
## LR(1) items:
list(top) -> top list(top) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(top) -> top list(top)

State 131:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
top -> expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
-- On STAR shift to state 44
-- On SEMICOLON shift to state 46
-- On PLUS shift to state 48
-- On MINUS shift to state 55
-- On LPAREN shift to state 50
-- On DOT shift to state 57
-- On DIV shift to state 59
-- On expr_list shift to state 61
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production top -> expression
** Conflict on LPAREN

State 132:
## Known stack suffix:
## def
## LR(1) items:
top -> def . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production top -> def

State 133:
## Known stack suffix:
## claim
## LR(1) items:
top -> claim . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## Transitions:
## Reductions:
-- On TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE
--   reduce production top -> claim

State 134:
## Known stack suffix:
## list(top)
## LR(1) items:
toplevel -> list(top) . EOF [ # ]
## Transitions:
-- On EOF shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## list(top) EOF
## LR(1) items:
toplevel -> list(top) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production toplevel -> list(top) EOF

