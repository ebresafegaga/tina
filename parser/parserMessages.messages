toplevel: CASE TRUE LBRACE ID LBRACE ID COLON FALSE COMMA UNDERSCORE
##
## Ends in an error in state: 84.
##
## separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr COMMA . separated_nonempty_list(COMMA,record_pattern_expr) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_pattern_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE ID COLON FALSE UNDERSCORE
##
## Ends in an error in state: 83.
##
## separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr . [ RBRACE ]
## separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr . COMMA separated_nonempty_list(COMMA,record_pattern_expr) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_pattern_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE ID COLON UNDERSCORE
##
## Ends in an error in state: 79.
##
## record_pattern_expr -> ID COLON . pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE ID UNDERSCORE
##
## Ends in an error in state: 78.
##
## record_pattern_expr -> ID . COLON pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE UNDERSCORE
##
## Ends in an error in state: 77.
##
## pattern -> ID LBRACE . separated_nonempty_list(COMMA,record_pattern_expr) RBRACE [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LPAREN TRUE COMMA UNDERSCORE
##
## Ends in an error in state: 75.
##
## separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 74.
##
## separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN ]
## separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LPAREN UNDERSCORE
##
## Ends in an error in state: 70.
##
## pattern -> ID LPAREN . separated_nonempty_list(COMMA,pattern) RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID UNDERSCORE
##
## Ends in an error in state: 69.
##
## pattern -> ID . [ RPAREN RBRACE COMMA ARROW ]
## pattern -> ID . LBRACE separated_nonempty_list(COMMA,record_pattern_expr) RBRACE [ RPAREN RBRACE COMMA ARROW ]
## pattern -> ID . LPAREN separated_nonempty_list(COMMA,pattern) RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 86.
##
## pattern -> LPAREN pattern . RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE LPAREN UNDERSCORE
##
## Ends in an error in state: 67.
##
## pattern -> LPAREN . pattern RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE ARROW FALSE COMMA UNDERSCORE
##
## Ends in an error in state: 94.
##
## separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body COMMA . separated_nonempty_list(COMMA,case_expr_body) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_expr_body COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE ARROW TRUE UNDERSCORE
##
## Ends in an error in state: 92.
##
## case_expr_body -> pattern ARROW expression . [ RBRACE COMMA ]
## expression -> expression . expr_list [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DOT ID [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . STAR expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DIV expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
##
## The known suffix of the stack is as follows:
## pattern ARROW expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE ARROW UNDERSCORE
##
## Ends in an error in state: 91.
##
## case_expr_body -> pattern ARROW . expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE UNDERSCORE
##
## Ends in an error in state: 90.
##
## case_expr_body -> pattern . ARROW expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE UNDERSCORE
##
## Ends in an error in state: 64.
##
## expression -> CASE expression LBRACE . separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CASE expression LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE UNDERSCORE
##
## Ends in an error in state: 43.
##
## expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> CASE expression . LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
##
## The known suffix of the stack is as follows:
## CASE expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE UNDERSCORE
##
## Ends in an error in state: 42.
##
## expression -> CASE . expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CASE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CLAIM ID TY_FLOAT UNDERSCORE
##
## Ends in an error in state: 147.
##
## list(top) -> top . list(top) [ EOF ]
##
## The known suffix of the stack is as follows:
## top
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CLAIM ID UNDERSCORE
##
## Ends in an error in state: 143.
##
## claim -> CLAIM ID . ty [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CLAIM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CLAIM UNDERSCORE
##
## Ends in an error in state: 142.
##
## claim -> CLAIM . ID ty [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CLAIM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID BAR UNDERSCORE
##
## Ends in an error in state: 139.
##
## separated_nonempty_list(BAR,single_variant) -> single_variant BAR . separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## single_variant BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID LPAREN TY_FLOAT RPAREN UNDERSCORE
##
## Ends in an error in state: 138.
##
## separated_nonempty_list(BAR,single_variant) -> single_variant . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## separated_nonempty_list(BAR,single_variant) -> single_variant . BAR separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## single_variant
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID LPAREN TY_STRING ARROW
##
## Ends in an error in state: 136.
##
## single_variant -> ID LPAREN separated_nonempty_list(COMMA,ty) . RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
##
## The known suffix of the stack is as follows:
## ID LPAREN separated_nonempty_list(COMMA,ty)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production separated_nonempty_list(COMMA,ty) -> ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID LPAREN UNDERSCORE
##
## Ends in an error in state: 135.
##
## single_variant -> ID LPAREN . separated_nonempty_list(COMMA,ty) RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID UNDERSCORE
##
## Ends in an error in state: 134.
##
## single_variant -> ID . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
## single_variant -> ID . LPAREN separated_nonempty_list(COMMA,ty) RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM ID TY_FLOAT COMMA UNDERSCORE
##
## Ends in an error in state: 132.
##
## separated_nonempty_list(COMMA,record_claim) -> record_claim COMMA . separated_nonempty_list(COMMA,record_claim) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_claim COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM ID TY_FLOAT UNDERSCORE
##
## Ends in an error in state: 131.
##
## separated_nonempty_list(COMMA,record_claim) -> record_claim . [ RBRACE ]
## separated_nonempty_list(COMMA,record_claim) -> record_claim . COMMA separated_nonempty_list(COMMA,record_claim) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_claim
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM ID UNDERSCORE
##
## Ends in an error in state: 127.
##
## record_claim -> CLAIM ID . ty [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## CLAIM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM UNDERSCORE
##
## Ends in an error in state: 126.
##
## record_claim -> CLAIM . ID ty [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## CLAIM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE UNDERSCORE
##
## Ends in an error in state: 125.
##
## record_decl -> DATA ID EQUALS LBRACE . separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA ID EQUALS LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS UNDERSCORE
##
## Ends in an error in state: 124.
##
## record_decl -> DATA ID EQUALS . LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## variant_decl -> DATA ID EQUALS . separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID UNDERSCORE
##
## Ends in an error in state: 123.
##
## record_decl -> DATA ID . EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## variant_decl -> DATA ID . EQUALS separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA UNDERSCORE
##
## Ends in an error in state: 122.
##
## record_decl -> DATA . ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## variant_decl -> DATA . ID EQUALS separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID EQUALS TRUE UNDERSCORE
##
## Ends in an error in state: 118.
##
## def -> DEF ID EQUALS expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID EQUALS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID EQUALS UNDERSCORE
##
## Ends in an error in state: 117.
##
## def -> DEF ID EQUALS . expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID LPAREN RPAREN EQUALS TRUE UNDERSCORE
##
## Ends in an error in state: 121.
##
## def -> DEF ID arg_list EQUALS expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID arg_list EQUALS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID LPAREN RPAREN EQUALS UNDERSCORE
##
## Ends in an error in state: 120.
##
## def -> DEF ID arg_list EQUALS . expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID arg_list EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID LPAREN RPAREN UNDERSCORE
##
## Ends in an error in state: 119.
##
## def -> DEF ID arg_list . EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID arg_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID UNDERSCORE
##
## Ends in an error in state: 116.
##
## def -> DEF ID . EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## def -> DEF ID . arg_list EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF UNDERSCORE
##
## Ends in an error in state: 115.
##
## def -> DEF . ID EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## def -> DEF . ID arg_list EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN ID COMMA UNDERSCORE
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN ID UNDERSCORE
##
## Ends in an error in state: 34.
##
## separated_nonempty_list(COMMA,param) -> param . [ RPAREN ]
## separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN RPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 96.
##
## expression -> FN arg_list expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## FN arg_list expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN RPAREN UNDERSCORE
##
## Ends in an error in state: 39.
##
## expression -> FN arg_list . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## FN arg_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN UNDERSCORE
##
## Ends in an error in state: 31.
##
## arg_list -> LPAREN . loption(separated_nonempty_list(COMMA,param)) RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EQUALS CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN UNDERSCORE
##
## Ends in an error in state: 30.
##
## expression -> FN . arg_list expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID COLON FALSE COMMA UNDERSCORE
##
## Ends in an error in state: 101.
##
## separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body COMMA . separated_nonempty_list(COMMA,record_expr_body) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_expr_body COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID COLON TRUE UNDERSCORE
##
## Ends in an error in state: 97.
##
## expression -> expression . expr_list [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DOT ID [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . STAR expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DIV expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## record_expr_body -> ID COLON expression . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID COLON UNDERSCORE
##
## Ends in an error in state: 29.
##
## record_expr_body -> ID COLON . expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID UNDERSCORE
##
## Ends in an error in state: 28.
##
## record_expr_body -> ID . COLON expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE UNDERSCORE
##
## Ends in an error in state: 27.
##
## expression -> ID LBRACE . separated_nonempty_list(COMMA,record_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID UNDERSCORE
##
## Ends in an error in state: 26.
##
## expression -> ID . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> ID . LBRACE separated_nonempty_list(COMMA,record_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN TRUE ELSE TRUE UNDERSCORE
##
## Ends in an error in state: 107.
##
## expression -> IF expression THEN expression ELSE expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression ELSE expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN TRUE ELSE UNDERSCORE
##
## Ends in an error in state: 106.
##
## expression -> IF expression THEN expression ELSE . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN TRUE UNDERSCORE
##
## Ends in an error in state: 105.
##
## expression -> IF expression THEN expression . ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN UNDERSCORE
##
## Ends in an error in state: 104.
##
## expression -> IF expression THEN . expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF expression THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE UNDERSCORE
##
## Ends in an error in state: 103.
##
## expression -> IF expression . THEN expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . SEMICOLON expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . PLUS expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . MINUS expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . STAR expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DIV expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
##
## The known suffix of the stack is as follows:
## IF expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF UNDERSCORE
##
## Ends in an error in state: 25.
##
## expression -> IF . expression THEN expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS TRUE SEMICOLON TRUE UNDERSCORE
##
## Ends in an error in state: 111.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression SEMICOLON expression . [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## maybe_empty_expr -> expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression SEMICOLON expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS TRUE SEMICOLON UNDERSCORE
##
## Ends in an error in state: 109.
##
## expression -> LET ID EQUALS expression SEMICOLON . maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression SEMICOLON . expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expression SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS TRUE UNDERSCORE
##
## Ends in an error in state: 108.
##
## expression -> LET ID EQUALS expression . SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS UNDERSCORE
##
## Ends in an error in state: 23.
##
## expression -> LET ID EQUALS . expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID UNDERSCORE
##
## Ends in an error in state: 22.
##
## expression -> LET ID . EQUALS expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET UNDERSCORE
##
## Ends in an error in state: 21.
##
## expression -> LET . ID EQUALS expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 112.
##
## expression -> expression . expr_list [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> LPAREN expression . RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LPAREN UNDERSCORE
##
## Ends in an error in state: 19.
##
## expression -> LPAREN . RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> LPAREN . expression RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN ARROW TY_STRING UNDERSCORE
##
## Ends in an error in state: 15.
##
## ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty . RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN ARROW UNDERSCORE
##
## Ends in an error in state: 14.
##
## ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW . ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN TY_STRING COMMA UNDERSCORE
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,ty) -> ty COMMA . separated_nonempty_list(COMMA,ty) [ RPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## ty COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN TY_STRING RPAREN
##
## Ends in an error in state: 13.
##
## ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) . ARROW ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,ty))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production separated_nonempty_list(COMMA,ty) -> ty
## In state 12, spurious reduction of production loption(separated_nonempty_list(COMMA,ty)) -> separated_nonempty_list(COMMA,ty)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN TY_STRING UNDERSCORE
##
## Ends in an error in state: 9.
##
## separated_nonempty_list(COMMA,ty) -> ty . [ RPAREN ARROW ]
## separated_nonempty_list(COMMA,ty) -> ty . COMMA separated_nonempty_list(COMMA,ty) [ RPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN UNDERSCORE
##
## Ends in an error in state: 8.
##
## ty -> LPAREN . loption(separated_nonempty_list(COMMA,ty)) ARROW ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE TY_STRING TRUE UNDERSCORE
##
## Ends in an error in state: 114.
##
## expression -> THE ty expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## THE ty expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE TY_STRING UNDERSCORE
##
## Ends in an error in state: 17.
##
## expression -> THE ty . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## THE ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE UNDERSCORE
##
## Ends in an error in state: 3.
##
## expression -> THE . ty expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## THE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE DIV TRUE UNDERSCORE
##
## Ends in an error in state: 60.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression DIV expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression DIV expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE DIV UNDERSCORE
##
## Ends in an error in state: 59.
##
## expression -> expression DIV . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE DOT UNDERSCORE
##
## Ends in an error in state: 57.
##
## expression -> expression DOT . ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE LPAREN TRUE COMMA UNDERSCORE
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 54.
##
## expression -> expression . expr_list [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DOT ID [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . STAR expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DIV expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
## separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE LPAREN UNDERSCORE
##
## Ends in an error in state: 50.
##
## expr_list -> LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE MINUS TRUE UNDERSCORE
##
## Ends in an error in state: 56.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression MINUS expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression MINUS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE MINUS UNDERSCORE
##
## Ends in an error in state: 55.
##
## expression -> expression MINUS . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE PLUS TRUE UNDERSCORE
##
## Ends in an error in state: 49.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression PLUS expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression PLUS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE PLUS UNDERSCORE
##
## Ends in an error in state: 48.
##
## expression -> expression PLUS . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE SEMICOLON TRUE UNDERSCORE
##
## Ends in an error in state: 47.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression SEMICOLON expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression SEMICOLON expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE SEMICOLON UNDERSCORE
##
## Ends in an error in state: 46.
##
## expression -> expression SEMICOLON . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE STAR TRUE UNDERSCORE
##
## Ends in an error in state: 45.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression STAR expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression STAR expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE STAR UNDERSCORE
##
## Ends in an error in state: 44.
##
## expression -> expression STAR . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE UNDERSCORE
##
## Ends in an error in state: 150.
##
## expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## top -> expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: UNDERSCORE
##
## Ends in an error in state: 0.
##
## toplevel' -> . toplevel [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE ID COLON FALSE COMMA UNDERSCORE
##
## Ends in an error in state: 84.
##
## separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr COMMA . separated_nonempty_list(COMMA,record_pattern_expr) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_pattern_expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE ID COLON FALSE UNDERSCORE
##
## Ends in an error in state: 83.
##
## separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr . [ RBRACE ]
## separated_nonempty_list(COMMA,record_pattern_expr) -> record_pattern_expr . COMMA separated_nonempty_list(COMMA,record_pattern_expr) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_pattern_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE ID COLON UNDERSCORE
##
## Ends in an error in state: 79.
##
## record_pattern_expr -> ID COLON . pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE ID UNDERSCORE
##
## Ends in an error in state: 78.
##
## record_pattern_expr -> ID . COLON pattern [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LBRACE UNDERSCORE
##
## Ends in an error in state: 77.
##
## pattern -> ID LBRACE . separated_nonempty_list(COMMA,record_pattern_expr) RBRACE [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LPAREN TRUE COMMA UNDERSCORE
##
## Ends in an error in state: 75.
##
## separated_nonempty_list(COMMA,pattern) -> pattern COMMA . separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 74.
##
## separated_nonempty_list(COMMA,pattern) -> pattern . [ RPAREN ]
## separated_nonempty_list(COMMA,pattern) -> pattern . COMMA separated_nonempty_list(COMMA,pattern) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID LPAREN UNDERSCORE
##
## Ends in an error in state: 70.
##
## pattern -> ID LPAREN . separated_nonempty_list(COMMA,pattern) RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE ID UNDERSCORE
##
## Ends in an error in state: 69.
##
## pattern -> ID . [ RPAREN RBRACE COMMA ARROW ]
## pattern -> ID . LBRACE separated_nonempty_list(COMMA,record_pattern_expr) RBRACE [ RPAREN RBRACE COMMA ARROW ]
## pattern -> ID . LPAREN separated_nonempty_list(COMMA,pattern) RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 86.
##
## pattern -> LPAREN pattern . RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE LPAREN UNDERSCORE
##
## Ends in an error in state: 67.
##
## pattern -> LPAREN . pattern RPAREN [ RPAREN RBRACE COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE ARROW FALSE COMMA UNDERSCORE
##
## Ends in an error in state: 94.
##
## separated_nonempty_list(COMMA,case_expr_body) -> case_expr_body COMMA . separated_nonempty_list(COMMA,case_expr_body) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## case_expr_body COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE ARROW TRUE UNDERSCORE
##
## Ends in an error in state: 92.
##
## case_expr_body -> pattern ARROW expression . [ RBRACE COMMA ]
## expression -> expression . expr_list [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DOT ID [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . STAR expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DIV expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
##
## The known suffix of the stack is as follows:
## pattern ARROW expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE ARROW UNDERSCORE
##
## Ends in an error in state: 91.
##
## case_expr_body -> pattern ARROW . expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## pattern ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE TRUE UNDERSCORE
##
## Ends in an error in state: 90.
##
## case_expr_body -> pattern . ARROW expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE LBRACE UNDERSCORE
##
## Ends in an error in state: 64.
##
## expression -> CASE expression LBRACE . separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CASE expression LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE TRUE UNDERSCORE
##
## Ends in an error in state: 43.
##
## expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> CASE expression . LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN LBRACE DOT DIV ]
##
## The known suffix of the stack is as follows:
## CASE expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CASE UNDERSCORE
##
## Ends in an error in state: 42.
##
## expression -> CASE . expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CASE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CLAIM ID TY_FLOAT UNDERSCORE
##
## Ends in an error in state: 147.
##
## list(top) -> top . list(top) [ EOF ]
##
## The known suffix of the stack is as follows:
## top
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CLAIM ID UNDERSCORE
##
## Ends in an error in state: 143.
##
## claim -> CLAIM ID . ty [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CLAIM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: CLAIM UNDERSCORE
##
## Ends in an error in state: 142.
##
## claim -> CLAIM . ID ty [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## CLAIM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID BAR UNDERSCORE
##
## Ends in an error in state: 139.
##
## separated_nonempty_list(BAR,single_variant) -> single_variant BAR . separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## single_variant BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID LPAREN TY_FLOAT RPAREN UNDERSCORE
##
## Ends in an error in state: 138.
##
## separated_nonempty_list(BAR,single_variant) -> single_variant . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## separated_nonempty_list(BAR,single_variant) -> single_variant . BAR separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## single_variant
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID LPAREN TY_STRING ARROW
##
## Ends in an error in state: 136.
##
## single_variant -> ID LPAREN separated_nonempty_list(COMMA,ty) . RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
##
## The known suffix of the stack is as follows:
## ID LPAREN separated_nonempty_list(COMMA,ty)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production separated_nonempty_list(COMMA,ty) -> ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID LPAREN UNDERSCORE
##
## Ends in an error in state: 135.
##
## single_variant -> ID LPAREN . separated_nonempty_list(COMMA,ty) RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS ID UNDERSCORE
##
## Ends in an error in state: 134.
##
## single_variant -> ID . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
## single_variant -> ID . LPAREN separated_nonempty_list(COMMA,ty) RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE BAR ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM ID TY_FLOAT COMMA UNDERSCORE
##
## Ends in an error in state: 132.
##
## separated_nonempty_list(COMMA,record_claim) -> record_claim COMMA . separated_nonempty_list(COMMA,record_claim) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_claim COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM ID TY_FLOAT UNDERSCORE
##
## Ends in an error in state: 131.
##
## separated_nonempty_list(COMMA,record_claim) -> record_claim . [ RBRACE ]
## separated_nonempty_list(COMMA,record_claim) -> record_claim . COMMA separated_nonempty_list(COMMA,record_claim) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_claim
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM ID UNDERSCORE
##
## Ends in an error in state: 127.
##
## record_claim -> CLAIM ID . ty [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## CLAIM ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE CLAIM UNDERSCORE
##
## Ends in an error in state: 126.
##
## record_claim -> CLAIM . ID ty [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## CLAIM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS LBRACE UNDERSCORE
##
## Ends in an error in state: 125.
##
## record_decl -> DATA ID EQUALS LBRACE . separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA ID EQUALS LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID EQUALS UNDERSCORE
##
## Ends in an error in state: 124.
##
## record_decl -> DATA ID EQUALS . LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## variant_decl -> DATA ID EQUALS . separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA ID UNDERSCORE
##
## Ends in an error in state: 123.
##
## record_decl -> DATA ID . EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## variant_decl -> DATA ID . EQUALS separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DATA UNDERSCORE
##
## Ends in an error in state: 122.
##
## record_decl -> DATA . ID EQUALS LBRACE separated_nonempty_list(COMMA,record_claim) RBRACE [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## variant_decl -> DATA . ID EQUALS separated_nonempty_list(BAR,single_variant) [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DATA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID EQUALS TRUE UNDERSCORE
##
## Ends in an error in state: 118.
##
## def -> DEF ID EQUALS expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID EQUALS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID EQUALS UNDERSCORE
##
## Ends in an error in state: 117.
##
## def -> DEF ID EQUALS . expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID LPAREN RPAREN EQUALS TRUE UNDERSCORE
##
## Ends in an error in state: 121.
##
## def -> DEF ID arg_list EQUALS expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID arg_list EQUALS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID LPAREN RPAREN EQUALS UNDERSCORE
##
## Ends in an error in state: 120.
##
## def -> DEF ID arg_list EQUALS . expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID arg_list EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID LPAREN RPAREN UNDERSCORE
##
## Ends in an error in state: 119.
##
## def -> DEF ID arg_list . EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID arg_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF ID UNDERSCORE
##
## Ends in an error in state: 116.
##
## def -> DEF ID . EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## def -> DEF ID . arg_list EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: DEF UNDERSCORE
##
## Ends in an error in state: 115.
##
## def -> DEF . ID EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
## def -> DEF . ID arg_list EQUALS expression [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## DEF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN ID COMMA UNDERSCORE
##
## Ends in an error in state: 35.
##
## separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN ID UNDERSCORE
##
## Ends in an error in state: 34.
##
## separated_nonempty_list(COMMA,param) -> param . [ RPAREN ]
## separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN RPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 96.
##
## expression -> FN arg_list expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## FN arg_list expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN RPAREN UNDERSCORE
##
## Ends in an error in state: 39.
##
## expression -> FN arg_list . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## FN arg_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN LPAREN UNDERSCORE
##
## Ends in an error in state: 31.
##
## arg_list -> LPAREN . loption(separated_nonempty_list(COMMA,param)) RPAREN [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EQUALS CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: FN UNDERSCORE
##
## Ends in an error in state: 30.
##
## expression -> FN . arg_list expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## FN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID COLON FALSE COMMA UNDERSCORE
##
## Ends in an error in state: 101.
##
## separated_nonempty_list(COMMA,record_expr_body) -> record_expr_body COMMA . separated_nonempty_list(COMMA,record_expr_body) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## record_expr_body COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID COLON TRUE UNDERSCORE
##
## Ends in an error in state: 97.
##
## expression -> expression . expr_list [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DOT ID [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . STAR expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DIV expression [ STAR SEMICOLON RBRACE PLUS MINUS LPAREN DOT DIV COMMA ]
## record_expr_body -> ID COLON expression . [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID COLON UNDERSCORE
##
## Ends in an error in state: 29.
##
## record_expr_body -> ID COLON . expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE ID UNDERSCORE
##
## Ends in an error in state: 28.
##
## record_expr_body -> ID . COLON expression [ RBRACE COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID LBRACE UNDERSCORE
##
## Ends in an error in state: 27.
##
## expression -> ID LBRACE . separated_nonempty_list(COMMA,record_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: ID UNDERSCORE
##
## Ends in an error in state: 26.
##
## expression -> ID . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> ID . LBRACE separated_nonempty_list(COMMA,record_expr_body) RBRACE [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN TRUE ELSE TRUE UNDERSCORE
##
## Ends in an error in state: 107.
##
## expression -> IF expression THEN expression ELSE expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression ELSE expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN TRUE ELSE UNDERSCORE
##
## Ends in an error in state: 106.
##
## expression -> IF expression THEN expression ELSE . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN TRUE UNDERSCORE
##
## Ends in an error in state: 105.
##
## expression -> IF expression THEN expression . ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN ELSE DOT DIV ]
##
## The known suffix of the stack is as follows:
## IF expression THEN expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE THEN UNDERSCORE
##
## Ends in an error in state: 104.
##
## expression -> IF expression THEN . expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF expression THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF TRUE UNDERSCORE
##
## Ends in an error in state: 103.
##
## expression -> IF expression . THEN expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . SEMICOLON expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . PLUS expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . MINUS expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . STAR expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DIV expression [ THEN STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
##
## The known suffix of the stack is as follows:
## IF expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: IF UNDERSCORE
##
## Ends in an error in state: 25.
##
## expression -> IF . expression THEN expression ELSE expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS TRUE SEMICOLON TRUE UNDERSCORE
##
## Ends in an error in state: 111.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression SEMICOLON expression . [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## maybe_empty_expr -> expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression SEMICOLON expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS TRUE SEMICOLON UNDERSCORE
##
## Ends in an error in state: 109.
##
## expression -> LET ID EQUALS expression SEMICOLON . maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression SEMICOLON . expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expression SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS TRUE UNDERSCORE
##
## Ends in an error in state: 108.
##
## expression -> LET ID EQUALS expression . SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . PLUS expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON PLUS MINUS LPAREN DOT DIV ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID EQUALS UNDERSCORE
##
## Ends in an error in state: 23.
##
## expression -> LET ID EQUALS . expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET ID UNDERSCORE
##
## Ends in an error in state: 22.
##
## expression -> LET ID . EQUALS expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LET UNDERSCORE
##
## Ends in an error in state: 21.
##
## expression -> LET . ID EQUALS expression SEMICOLON maybe_empty_expr [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 112.
##
## expression -> expression . expr_list [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DOT ID [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . STAR expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> expression . DIV expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV ]
## expression -> LPAREN expression . RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: LPAREN UNDERSCORE
##
## Ends in an error in state: 19.
##
## expression -> LPAREN . RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> LPAREN . expression RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN ARROW TY_STRING UNDERSCORE
##
## Ends in an error in state: 15.
##
## ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty . RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN ARROW UNDERSCORE
##
## Ends in an error in state: 14.
##
## ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW . ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,ty)) ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN TY_STRING COMMA UNDERSCORE
##
## Ends in an error in state: 10.
##
## separated_nonempty_list(COMMA,ty) -> ty COMMA . separated_nonempty_list(COMMA,ty) [ RPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## ty COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN TY_STRING RPAREN
##
## Ends in an error in state: 13.
##
## ty -> LPAREN loption(separated_nonempty_list(COMMA,ty)) . ARROW ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN loption(separated_nonempty_list(COMMA,ty))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 9, spurious reduction of production separated_nonempty_list(COMMA,ty) -> ty
## In state 12, spurious reduction of production loption(separated_nonempty_list(COMMA,ty)) -> separated_nonempty_list(COMMA,ty)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN TY_STRING UNDERSCORE
##
## Ends in an error in state: 9.
##
## separated_nonempty_list(COMMA,ty) -> ty . [ RPAREN ARROW ]
## separated_nonempty_list(COMMA,ty) -> ty . COMMA separated_nonempty_list(COMMA,ty) [ RPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE LPAREN UNDERSCORE
##
## Ends in an error in state: 8.
##
## ty -> LPAREN . loption(separated_nonempty_list(COMMA,ty)) ARROW ty RPAREN [ TRUE TK_TODO THE STRING RPAREN RBRACE LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA COMMA CLAIM CASE ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE TY_STRING TRUE UNDERSCORE
##
## Ends in an error in state: 114.
##
## expression -> THE ty expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## THE ty expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE TY_STRING UNDERSCORE
##
## Ends in an error in state: 17.
##
## expression -> THE ty . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## THE ty
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: THE UNDERSCORE
##
## Ends in an error in state: 3.
##
## expression -> THE . ty expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## THE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE DIV TRUE UNDERSCORE
##
## Ends in an error in state: 60.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression DIV expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression DIV expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE DIV UNDERSCORE
##
## Ends in an error in state: 59.
##
## expression -> expression DIV . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE DOT UNDERSCORE
##
## Ends in an error in state: 57.
##
## expression -> expression DOT . ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE LPAREN TRUE COMMA UNDERSCORE
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expression COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE LPAREN TRUE UNDERSCORE
##
## Ends in an error in state: 54.
##
## expression -> expression . expr_list [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . SEMICOLON expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DOT ID [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . PLUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . MINUS expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . STAR expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## expression -> expression . DIV expression [ STAR SEMICOLON RPAREN PLUS MINUS LPAREN DOT DIV COMMA ]
## separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
## separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE LPAREN UNDERSCORE
##
## Ends in an error in state: 50.
##
## expr_list -> LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE MINUS TRUE UNDERSCORE
##
## Ends in an error in state: 56.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression MINUS expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression MINUS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE MINUS UNDERSCORE
##
## Ends in an error in state: 55.
##
## expression -> expression MINUS . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE PLUS TRUE UNDERSCORE
##
## Ends in an error in state: 49.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression PLUS expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression PLUS expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE PLUS UNDERSCORE
##
## Ends in an error in state: 48.
##
## expression -> expression PLUS . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE SEMICOLON TRUE UNDERSCORE
##
## Ends in an error in state: 47.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression SEMICOLON expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression SEMICOLON expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE SEMICOLON UNDERSCORE
##
## Ends in an error in state: 46.
##
## expression -> expression SEMICOLON . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE STAR TRUE UNDERSCORE
##
## Ends in an error in state: 45.
##
## expression -> expression . expr_list [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression STAR expression . [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression STAR expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE STAR UNDERSCORE
##
## Ends in an error in state: 44.
##
## expression -> expression STAR . expression [ TRUE TK_TODO THEN THE STRING STAR SEMICOLON RPAREN RBRACE PLUS MINUS LPAREN LET LBRACE INT IF ID FN FLOAT FALSE EOF ELSE DOT DIV DEF DATA COMMA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression STAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: TRUE UNDERSCORE
##
## Ends in an error in state: 150.
##
## expression -> expression . expr_list [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . SEMICOLON expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DOT ID [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . PLUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . MINUS expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . STAR expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## expression -> expression . DIV expression [ TRUE TK_TODO THE STRING STAR SEMICOLON PLUS MINUS LPAREN LET INT IF ID FN FLOAT FALSE EOF DOT DIV DEF DATA CLAIM CASE ]
## top -> expression . [ TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE EOF DEF DATA CLAIM CASE ]
##
## The known suffix of the stack is as follows:
## expression
##

<YOUR SYNTAX ERROR MESSAGE HERE>

toplevel: UNDERSCORE
##
## Ends in an error in state: 0.
##
## toplevel' -> . toplevel [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

