
** Conflict (shift/reduce) in state 131.
** Token involved: LPAREN
** This state is reached from toplevel after reading:

expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
(?)

** In state 131, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

top list(top) 
expression 
expression expr_list 
           . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 

** In state 131, looking ahead at LPAREN, reducing production
** top -> expression
** is permitted because of the following sub-derivation:

top list(top) // lookahead token appears because list(top) can begin with LPAREN
expression . 

** Conflict (shift/reduce) in state 111.
** Token involved: LPAREN
** This state is reached from toplevel after reading:

DEF ID arg_list EQUALS expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
(?)

** In state 111, looking ahead at LPAREN, reducing production
** def -> DEF ID arg_list EQUALS expression
** is permitted because of the following sub-derivation:

top list(top) // lookahead token appears because list(top) can begin with LPAREN
def // lookahead token is inherited
DEF ID arg_list EQUALS expression . 

** In state 111, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

top list(top) 
def 
DEF ID arg_list EQUALS expression 
                       expression expr_list 
                                  . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 

** Conflict (shift/reduce) in state 108.
** Token involved: LPAREN
** This state is reached from toplevel after reading:

DEF ID EQUALS expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
(?)

** In state 108, looking ahead at LPAREN, reducing production
** def -> DEF ID EQUALS expression
** is permitted because of the following sub-derivation:

top list(top) // lookahead token appears because list(top) can begin with LPAREN
def // lookahead token is inherited
DEF ID EQUALS expression . 

** In state 108, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

top list(top) 
def 
DEF ID EQUALS expression 
              expression expr_list 
                         . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN 

** Conflict (shift/reduce) in state 104.
** Tokens involved: STAR SEMICOLON PLUS MINUS LPAREN DOT DIV
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

THE ty expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 104, looking ahead at STAR, reducing production
** expression -> THE ty expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
THE ty expression . 

** In state 104, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

THE ty expression 
       expression . STAR expression 

** Conflict (shift/reduce/reduce) in state 101.
** Tokens involved: STAR SEMICOLON PLUS MINUS LPAREN DOT DIV
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

LET ID EQUALS expression SEMICOLON expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 101, looking ahead at STAR, reducing production
** expression -> expression SEMICOLON expression
** is permitted because of the following sub-derivation:

LET ID EQUALS expression SEMICOLON maybe_empty_expr 
              expression STAR expression // lookahead token appears
              expression SEMICOLON expression . 

** In state 101, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

LET ID EQUALS expression SEMICOLON maybe_empty_expr 
                                   expression 
                                   expression . STAR expression 

** In state 101, looking ahead at STAR, reducing production
** maybe_empty_expr -> expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
LET ID EQUALS expression SEMICOLON maybe_empty_expr // lookahead token is inherited
                                   expression . 

** Conflict (shift/reduce) in state 99.
** Tokens involved: TRUE TK_TODO THE STRING LPAREN LET INT IF ID FN FLOAT FALSE CASE
** The following explanations concentrate on token TRUE.
** This state is reached from toplevel after reading:

LET ID EQUALS expression SEMICOLON

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
(?)

** In state 99, looking ahead at TRUE, shifting is permitted
** because of the following sub-derivation:

top list(top) 
expression 
LET ID EQUALS expression SEMICOLON maybe_empty_expr 
                                   expression 
                                   . TRUE 

** In state 99, looking ahead at TRUE, reducing production
** maybe_empty_expr ->
** is permitted because of the following sub-derivation:

top list(top) // lookahead token appears because list(top) can begin with TRUE
expression // lookahead token is inherited
LET ID EQUALS expression SEMICOLON maybe_empty_expr // lookahead token is inherited
                                   . 

** Conflict (shift/reduce) in state 97.
** Tokens involved: STAR SEMICOLON PLUS MINUS LPAREN DOT DIV
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

IF expression THEN expression ELSE expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 97, looking ahead at STAR, reducing production
** expression -> IF expression THEN expression ELSE expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
IF expression THEN expression ELSE expression . 

** In state 97, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

IF expression THEN expression ELSE expression 
                                   expression . STAR expression 

** Conflict (shift/reduce) in state 86.
** Tokens involved: STAR SEMICOLON PLUS MINUS LPAREN DOT DIV
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

FN arg_list expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 86, looking ahead at STAR, reducing production
** expression -> FN arg_list expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
FN arg_list expression . 

** In state 86, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

FN arg_list expression 
            expression . STAR expression 

** Conflict (shift/reduce) in state 60.
** Tokens involved: STAR SEMICOLON LPAREN DOT
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

expression DIV expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 60, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

expression DIV expression 
               expression . STAR expression 

** In state 60, looking ahead at STAR, reducing production
** expression -> expression DIV expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
expression DIV expression . 

** Conflict (shift/reduce) in state 56.
** Tokens involved: STAR SEMICOLON LPAREN DOT
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

expression MINUS expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 56, looking ahead at STAR, reducing production
** expression -> expression MINUS expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
expression MINUS expression . 

** In state 56, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

expression MINUS expression 
                 expression . STAR expression 

** Conflict (shift/reduce) in state 49.
** Tokens involved: STAR SEMICOLON LPAREN DOT
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

expression PLUS expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 49, looking ahead at STAR, reducing production
** expression -> expression PLUS expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
expression PLUS expression . 

** In state 49, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

expression PLUS expression 
                expression . STAR expression 

** Conflict (shift/reduce) in state 47.
** Tokens involved: STAR SEMICOLON PLUS MINUS LPAREN DOT DIV
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

expression SEMICOLON expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 47, looking ahead at STAR, reducing production
** expression -> expression SEMICOLON expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
expression SEMICOLON expression . 

** In state 47, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

expression SEMICOLON expression 
                     expression . STAR expression 

** Conflict (shift/reduce) in state 45.
** Tokens involved: STAR SEMICOLON PLUS MINUS LPAREN DOT DIV
** The following explanations concentrate on token STAR.
** This state is reached from toplevel after reading:

expression STAR expression

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 45, looking ahead at STAR, shifting is permitted
** because of the following sub-derivation:

expression STAR expression 
                expression . STAR expression 

** In state 45, looking ahead at STAR, reducing production
** expression -> expression STAR expression
** is permitted because of the following sub-derivation:

expression STAR expression // lookahead token appears
expression STAR expression . 

** Conflict (shift/reduce) in state 26.
** Token involved: LBRACE
** This state is reached from toplevel after reading:

CASE ID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

toplevel 
list(top) EOF 
top list(top) 
expression 
(?)

** In state 26, looking ahead at LBRACE, reducing production
** expression -> ID
** is permitted because of the following sub-derivation:

CASE expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE // lookahead token appears
     ID . 

** In state 26, looking ahead at LBRACE, shifting is permitted
** because of the following sub-derivation:

CASE expression LBRACE separated_nonempty_list(COMMA,case_expr_body) RBRACE 
     ID . LBRACE separated_nonempty_list(COMMA,record_expr_body) RBRACE 
