



-- basic features

-- recursive functions

def fib (n) =
    case (n) {
        1 -> 0, 
        2 -> 1, 
        n -> fib (n - 1) + fib (n - 2)
    }

"Fib numbers"
fib (1)
fib (2)
fib (3)
fib (4)
fib (5)
fib (10)


datatype subject =
   { claim name String,
     claim code Nat,
     claim other String }

def o = subject { name: "MAT 423", code: 423, other: "no other" }

def math = subject { name: "MAT 423", code: 423, other: o}

case (math) {
     subject { name: n, code: c, other: subject {name: n1, code: c1}} -> (n, c, n1, c1)
}

datatype level = L100 | L200 | L300 | L400 | L500

def l = L100

case (l) {
     L100 -> 100,
     L200 -> 200,
     L300 -> 300,
     L400 -> 400,
     L500 -> 500
}     


-- basic features 

-- booleans 

true 

false 

-- integers

10 

-- floats 

23.34

-- string 

"this is a string"

-- tuples 

def t = (10, 343)

-- first-class functions (or closures)

def add = 
	fn (x) 
    	fn (y) x + y 
        
-- top level definitions 


def name = "ogaga"

def age = 20

-- toplevel function definition 

def pair_up (x, y) = (x, y)

def identity (x) = x

-- function application

def og = identity ("og")

-- pattern matching 

def is_me (p) =
	case (p) {
    	"not me" -> "this would not be matched",
        "ogaga" -> "this is me"
     }









-- type checking 

-- Tina uses a bidirectional type checker so it can do type inference 

claim a Int 
def a = 10

claim b String
def b = "this is a string"

claim c Float 
def c = 1.2222

claim add (Int, Int -> Int) 
def add (x, y) = x + y

claim pair (String, Int) 
def pair = ("str", 34)


datatype Name = Ogaga | Afoke | Fejiro (Float) | Yoma (Nat, String) | Vovwero (Nat, Nat)

def o = Ogaga

def y = Yoma (10, "ooo")

def v = Vovwero (23, 2)

case (v) {
     Vovwero (Fejiro (x, y), b) -> (x, y, b),
     Fejiro (f) -> f,
     Ogaga -> "ogaga",
     Afoke -> "afoks",
     Yoma (a, b) -> (b, a)
}

datatype person =
   { claim name String,
     claim age Nat }


def p = person { name: Yoma (23, "elim"), age: 24 }

p.name


-- algebraic effects


def invoke () =
    let a = do Number1 ();
    let b = do Number2 ();
    (a, b)

handle invoke () {
	return a -> a,
	Number1 () k -> k (1),
	Number2 () k -> k (2)
}


{-

let a = 10;
let b = 20;
(a, b)

-}

def decide () = if do Decide () then "ogaga" else "afoke"

def id (x) = do Hey (x)

handle id (10) {
       return x -> x,
       Hey (v) k -> (v, "ahhh")
}

handle decide () {
    return c -> c,
    Decide () k -> k (true)
}


-- js compilation



datatype subject =
   { claim name String,
     claim code Nat,
     claim other String }

def o = subject { name: "MAT 423", code: 423, other: "no other" }

def math = subject { name: "MAT 423", code: 423, other: o}

case (math) {
     subject { name: n, code: c, other: subject {name: n1, code: c1}} -> (n, c, n1, c1)
}

datatype level = L100 | L200 | L300 | L400 | L500

def l = L100

case (l) {
     L100 -> 100,
     L200 -> 200,
     L300 -> 300,
     L400 -> 400,
     L500 -> 500
}     


datatype Name = Ogaga | Afoke | Fejiro (Float) | Yoma (Nat, String) | Vovwero (Nat, Nat)

def o = Ogaga

def y = Yoma (10, "ooo")

def v = Vovwero (23, 2)

case (v) {
     Vovwero (Fejiro (x, y), b) -> (x, y, b),
     Fejiro (f) -> f,
     Ogaga -> "ogaga",
     Afoke -> "afoks",
     Yoma (a, b) -> (b, a)
}

datatype person =
   { claim name String,
     claim age Nat }


def p = person { name: Yoma (23, "elim"), age: 24 }

p.name