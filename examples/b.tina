	

handle (let y = do N ("ogaga", 20);
        let b = do S ();
	"hello " + y + " you are " + b + " years old ") {
   return x -> x,
   N (a, b) k -> k (a),
   S () k -> k (20)
}


handle (let a = do Number ();
        let b = do Number ();
	a +b ) {
	return a -> a,
	Number () k ->
	       let c = k (10);
	       let d = k (20);
	       c
}


handle (let a = do Get ();
        if a then "t" else "false") {
  return x -> x,
  Get () k -> k (true)
}

handle (let a = do Get ();
        case (a) { 0 -> "yay", y -> y } ) {
  return x -> x,
  Get () k -> 99234
}


handle 10 {
   return x -> x,
}

handle (let k = do K ();
         k) {
    return x -> x,
    K () k -> k ("my k")
}

handle (handle do N () {
       return y -> y, }) {
       return x -> x,
       N () k -> k (1)
}

handle (handle (handle do N () {
       return y -> y, }) {
       return x -> x,
}) {
  return z -> z,
  N () k -> k ("fuck yeah")
}


def b = handle do Read () {
       return x -> x,
       Read () k ->
         let r = k (13);
	 let s = k (12);
	 let b = (fn (xs) xs);
	 "ogaga"	 
}



datatype p = { claim a String, claim b Nat}

def v = p { a: "og", b: 10 }

let p = v; p.b